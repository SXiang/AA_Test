// DO NOT EDIT: This file is automatically generated each time the script is modified.
// To modify this file either use 'Insert Java Code Snippet'or 'Insert Java Method' 
// option from simplified script.
package ACL_Desktop.AppObject;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;

import lib.acl.helper.sup.LoggerHelper;
import lib.acl.helper.sup.ObjectHelper;

import resources.ACL_Desktop.AppObject.aclTableTabsHelper;
import com.rational.test.ft.*;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.value.*;
import com.rational.test.ft.vp.*;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;

// BEGIN custom imports 		
//TODO: Add custom imports here.
// END custom imports


public class aclTableTabs extends aclTableTabsHelper
{
	/**
	 * Script Name   : <b>aclTableTabs</b>
	 * Generated     : <b>2013-01-23 4:22:15 PM</b>
	 * Description   : Functional Test Script
	 * 
	 * @since  2013/01/23
	 * @author STEVEN_XIANG
	 */
	private ArrayList<String> tabList;
	
	public aclTableTabs(){
		tabList = DesktopSuperHelper.tabList;
	}
	public void clear(){
		boolean ws = true;
		tabList.clear();
		if(ws){
		  tabList.add("_Welcome");
		  DesktopSuperHelper.activeTab = 0;
		}
	}
	public void remove(){
 	   if(tabList.size()>1) // Suppose ws = true;
 	      tabList.remove(tabList.size()-1);  
 	   else
 		   LoggerHelper.logTAFWarning("Have you opened any table yet?");
	}
	public void remove(String item){
	 	   if(tabList.contains(item)){
	 		   moveActiveTab(item);
	 	      tabList.remove(item);  
	 	   }
		}	
	public void add(String item){
		if(!tabList.contains(item)){
			String temp = tabList.get(DesktopSuperHelper.activeTab);
			if(!isPined(temp)){
				remove(temp	);
				tabList.add(DesktopSuperHelper.activeTab,item);
			}else{
    		  tabList.add(item);
		      DesktopSuperHelper.activeTab = tabList.size()-1;
			}
		}else{
			DesktopSuperHelper.activeTab = tabList.indexOf(item);
		}
	}
	public boolean isLast(int index){
		return index==tabList.size()-1;
	}
	public String getLast(){
		return tabList.get(tabList.size()-1);
	}
	public boolean isActive(int index){
		return index==DesktopSuperHelper.activeTab;
	}
	public void moveActiveTab(String tab){
		   int index = tabList.indexOf(tab); 		   
 		   if(isActive(index)){
 			   if(isLast(index)){
 				  DesktopSuperHelper.activeTab = index-1;
 			   }
 		   }
	}
 	 //************  Pin Tab ***********
	
	public boolean actOnTab(String act){
		if(act.equals(""))
			return true;
		if(act.equalsIgnoreCase("Pin"))
			return pinTab();
		else if(act.equalsIgnoreCase("Close"))
		    return closeTab();
		else{
			LoggerHelper.logTAFWarning("Action on tab - '"+act+"' is not supported currently!");
		}
		return true;
	}
	 public boolean pinTab(){
	       return pinTab(getLast());
	 	 }	
 	 public boolean pinTab(String tab){
        boolean done = false;
        if(!isPined(tab)){
           ObjectHelper.click(tabCtrlwindow(),getTabPoint(tab,-8),"Pin "+tab);
        }
 	   return done;
 	 }
 	 public boolean unpinTab(String tab){
         boolean done = false;
         if(isPined(tab)){
            ObjectHelper.click(tabCtrlwindow(),getTabPoint(tab,-8),"Unpin "+tab);
         }
  	   return done;
  	 } 	 
 	 public boolean isPined(String tab){
 		 boolean pined = false;
 		 //TBD ..... Steven - need to capture the icon 
 		 
 		 
 		 
 		 
 		 
 		 
 		 return pined;
 	 }
 	 //********* Close Tab ***********
     public boolean closeTab(){
      return closeTab(getLast());
	 }
	 
	 public boolean closeTab(String tab){
       boolean done = false;
       if(!isActive(tabList.indexOf(tab)))
	       done = switchToTab(tab);
       
       ObjectHelper.click(tabCtrlwindow(),getCloseTabPoint(),"Close Tab "+tab);
	   if(done){
		   moveActiveTab(tab);
	   }
	   
	   return done;
	 }
  	 
	 public boolean switchToTab(String tab){
	   boolean done = false;
	   ObjectHelper.click(tabCtrlwindow(),getTabPoint(tab,-50),tab);	   
	   DesktopSuperHelper.activeTab = tabList.indexOf(tab);
	   return done;
	 }
	 
	 public Point getCloseTabPoint(){
		 int y = 0,x=0;		 
		 Rectangle rec =tabCtrlwindow().getScreenRectangle();
		 x = rec.width -15;
		 y = rec.height/2;
		 
		 return new Point(x,y);
	 }
	 public Point getTabPoint(String tab,int x){
		 int dev = x;
		 int y=8,pointsPerByte = 5, icon = 22, pin = 20 + 1; //Actual Icon(15,12),Actual Pin(14,14)
		 int index = tabList.indexOf(tab);

		 for(int i=0;i<=index;i++){
			 String temp = tabList.get(i);
			 int bytes = temp.getBytes().length;
			 if(isActive(i)){
				 pointsPerByte += 1; 
			 }
			 x += icon + bytes*pointsPerByte + pin;
		 }
		 System.out.println(tab+" - x = "+(x-dev) );
		 return new Point(x,y);
	 }
	public void testMain(Object[] args) 
	{
	}
}
		
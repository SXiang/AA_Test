// DO NOT EDIT: This file is automatically generated each time the script is modified.
// To modify this file either use 'Insert Java Code Snippet'or 'Insert Java Method' 
// option from simplified script.
package ACL_Desktop.AppObject;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;

import lib.acl.helper.sup.LoggerHelper;
import lib.acl.helper.sup.ObjectHelper;

import resources.ACL_Desktop.AppObject.aclTableTabsHelper;
import com.rational.test.ft.*;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.value.*;
import com.rational.test.ft.vp.*;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;

// BEGIN custom imports 		
//TODO: Add custom imports here.
// END custom imports


public class aclTableTabs extends aclTableTabsHelper
{
	/**
	 * Script Name   : <b>aclTableTabs</b>
	 * Generated     : <b>2013-01-23 4:22:15 PM</b>
	 * Description   : Functional Test Script
	 * 
	 * @since  2013/01/23
	 * @author STEVEN_XIANG
	 */
	private ArrayList<String> tabList;
	private String wPage = "Welcome";
	public aclTableTabs(){
		tabList = DesktopSuperHelper.tabList;
	}
	public void clear(){
		boolean ws = true;
		tabList.clear();
		if(ws){
		  tabList.add(wPage);
		  verifyActiveTable( 0);
		}
	}
	public void remove(){
 	   if(tabList.size()>1) // Suppose ws = true;
 	      tabList.remove(tabList.size()-1);  
 	   else
 		   LoggerHelper.logTAFWarning("Have you opened any table yet?");
	}
	public void remove(String item){
	 	   if(tabList.contains(item)){
	 		   LoggerHelper.logInfo("Table tab "+item+" removed from desktop manager");
	 		   moveActiveTab(item);
	 	      tabList.remove(item);  
	 	   }
		}	
	public void add(String item){
		add(item,"");
	}
	public void add(String item,String actOnTab){
		if(!isTraceable(item))
			return;
		if(!tabList.contains(item)){
			LoggerHelper.logInfo("Table tab "+item+" added to document manager");
			String temp = tabList.get(DesktopSuperHelper.activeTab);
			if(!temp.equalsIgnoreCase(wPage)&&isUnpined(temp)){
				remove(temp	);
				tabList.add(DesktopSuperHelper.activeTab,item);
			}else{
    		  tabList.add(item);
		      verifyActiveTable(tabList.size()-1);
			}
			
			if(!actOnTab.equalsIgnoreCase("Close")){
				actOnTab(actOnTab,item);
			}
		}else{
			verifyActiveTable( tabList.indexOf(item));
			if(actOnTab.equalsIgnoreCase("Close")){
				actOnTab(actOnTab,item);
			}
		}
	}
	public boolean isLast(int index){
		return index==tabList.size()-1;
	}
	public String getLast(){
		return tabList.get(tabList.size()-1);
	}
	public boolean isActive(int index){
		return index==DesktopSuperHelper.activeTab;
	}
	public void moveActiveTab(String tab){
		   int index = tabList.indexOf(tab); 		   
 		   if(isActive(index)){
 			   if(isLast(index)){
 				  verifyActiveTable( index-1);
 			   }
 		   }
 		 //  verifyTabStatus(tab);
	}
	
	public void verifyTabStatus(String item){		
	   if(item.equalsIgnoreCase(wPage)){
		   //LoggerHelper.logTAFWarning("There is no status for the "+wPage);
		   return;
	   }
	   // TBD: Need to debug the find method -- Steven
	   LoggerHelper.logInfo("Status bar - "+DesktopSuperHelper.getTableStatus(ACL10(),acl_StatusBar(),item));
	  // ObjectHelper.printObjectTree(acl_StatusBar());
	}
	public void verifyActiveTable(int activeIndex){
		verifyTabStatus(tabList.get(activeIndex));
		DesktopSuperHelper.activeTab = activeIndex;
	}
	public void switchTableTabs(){
	
	   for(String tab:tabList){
	       switchToTab(tab);
	   }
	}
 	 //************  Pin Tab ***********
	
	public boolean actOnTab(String act){
		return actOnTab(act,getLast());
	}
    public boolean actOnTab(String act,String item){
		if(act.equals(""))
			return true;
		if(act.equalsIgnoreCase("Pin"))
			return pinTab(item);
		else if(act.equalsIgnoreCase("Close"))
		    return closeTab(item);
		else{
			LoggerHelper.logTAFWarning("Action on tab - '"+act+"' is not supported currently!");
		}
		return true;
	}
	 public boolean pinTab(){
	       return pinTab(getLast());
	 	 }	
 	 public boolean pinTab(String tab){
        boolean done = false;
        if(!isTraceable(tab))
        	return false;
        if(!isPined(tab)){
           ObjectHelper.click(tabCtrlwindow(),getTabPoint(tab,-8),"Pin[/Unpin] "+tab);
        }
        
 	   return done;
 	 }
 	 public boolean unpinTab(String tab){
         boolean done = false;
         if(!isTraceable(tab))
         	return false;
         if(isPined(tab)){
            ObjectHelper.click(tabCtrlwindow(),getTabPoint(tab,-8),"Unpin[/Pin] "+tab);
         }
  	   return done;
  	 } 	 
 	 public boolean isUnpined(String tab){
 		return false;
        //return !isPined(tab);
 	 }
 	 public boolean isPined(String tab){
 		 boolean pined = false;
 		 //TBD ..... Steven - need to capture the icon 
 		 
 		 
 		 
 		 
 		 
 		 
 		 return pined;
 	 }
 	 //********* Close Tab ***********
     public boolean closeTab(){
      return closeTab(getLast());
	 }
	 
	 public boolean closeTab(String tab){
       boolean done = false;
       if(!isActive(tabList.indexOf(tab)))
	       done = switchToTab(tab);
       
       ObjectHelper.click(tabCtrlwindow(),getCloseTabPoint(),"Close Tab "+tab);
	   if(done){
		   remove(tab);
	   }
	   
	   return done;
	 }
  	 
	 public boolean switchToTab(String tab){
	   boolean done = false;
	   ObjectHelper.click(tabCtrlwindow(),getTabPoint(tab,-50),tab);
	   
	   verifyActiveTable( tabList.indexOf(tab));	   
	   //verifyTabStatus(tab);
	   return done;
	 }
	 
	 public Point getCloseTabPoint(){
		 int y = 0,x=0;		 
		 Rectangle rec =tabCtrlwindow().getScreenRectangle();
		 x = rec.width -15;
		 y = rec.height/2;
		 
		 return new Point(x,y);
	 }
	 public Point getTabPoint(String tab,int x){
		 int dev = x;
		 int y=8,lspace = 6;
		 int index = tabList.indexOf(tab);

		 for(int i=0;i<=index;i++){
			 String temp = tabList.get(i);			 
			 x += lengthOf(temp,isActive(i));
			 if(i==0){
				 x += lspace;
			 }
			 LoggerHelper.logTAFDebug("\t\tLOOP:"+temp+" - x = "+(x-dev) );
		 }
		 LoggerHelper.logTAFDebug(tab+" - x = "+(x-dev) );
		 return new Point(x,y);
	 }

	 //*******  defined for table tab tracing *************
     public String[][] tableTab ={{wPage,"87","93"},
				{"Inventory","86","98"},
				{"Trans","69","73"},
				{"Ap_Trans","88","95"},
				{"Payroll","74","80"},
				{"Inventory2","92","105"},
				{"Vendor","77","81"},
				{"Sales_Reps","99","106"},
				{"Dept","65","68"},
				{"Customer","86","96"},
				{"Empmast","85","94"},
				{"Work_Depts","102","111"},
				{"Inventory_saveas","126","145"},
				{"Inventory_renamed","133","156"},
				{"TBD","0","0"},
		};
     //*****************************************************
     
     public boolean isTraceable(String tab){
    	 boolean traceable = false;
 		for(int i=0;i<tableTab.length;i++){
			if(tab.equalsIgnoreCase(tableTab[i][0])){
				return true;
			}
		}
 		return traceable;
     }
	 public int lengthOf(String tab,boolean active){
		 int index = 1;
		 int bytes = tab.getBytes().length;
		 int pointsPerByte = 5, icon = 22, pin = 20 + 1; //Actual Icon(15,12),Actual Pin(14,14)
		 if(active){
			 index =2;
			 pointsPerByte = 6;
		 }

		
		for(int i=0;i<tableTab.length;i++){
			if(tab.equalsIgnoreCase(tableTab[i][0])){
				return Integer.parseInt(tableTab[i][index]);
			}
		}
		LoggerHelper.logTAFDebug("Pin point tab "+tab+" may fail due to wrong point clicked");
		return icon + bytes*pointsPerByte + pin;
	 }
	public void testMain(Object[] args) 
	{
	}
}
		
// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources.ACL_Desktop.Tasks;
import ACL_Desktop.AppObject.DesktopSuperHelper;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>ddwmenu</b><br>
 * Generated     : <b>2013/01/03 4:06:50 PM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows XP x86 5.1 build 2600 Service Pack 3 <br>
 * 
 * @since  January 03, 2013
 * @author STEVEN_XIANG
 */
public abstract class ddwmenuHelper extends ACL_Desktop.AppObject.DesktopSuperHelper
{
	/**
	 * _Cancel: with default state.
	 *		.text : Cancel
	 * 		.class : Button
	 * 		.name : Cancel
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ACLCrash_Cancel() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ACLCrash_Cancel"));
	}
	/**
	 * _Cancel: with specific test context and state.
	 *		.text : Cancel
	 * 		.class : Button
	 * 		.name : Cancel
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ACLCrash_Cancel(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ACLCrash_Cancel"), anchor, flags);
	}
	
	/**
	 * Text: with default state.
	 *		.class : .Text
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject ACLCrash_msg() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ACLCrash_msg"));
	}
	/**
	 * Text: with specific test context and state.
	 *		.class : .Text
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject ACLCrash_msg(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ACLCrash_msg"), anchor, flags);
	}
	
	/**
	 * DataDefinitionWizardSelectPlatformForDataSource: with default state.
	 *		.text : RegularExpression(Data Definition Wizard)
	 * 		.class : #32770
	 * 		.processName : ACLWin.exe
	 * 		.name : RegularExpression(Data Definition Wizard)
	 */
	protected TopLevelSubitemTestObject DDW() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("DDW"));
	}
	/**
	 * DataDefinitionWizardSelectPlatformForDataSource: with specific test context and state.
	 *		.text : RegularExpression(Data Definition Wizard)
	 * 		.class : #32770
	 * 		.processName : ACLWin.exe
	 * 		.name : RegularExpression(Data Definition Wizard)
	 */
	protected TopLevelSubitemTestObject DDW(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("DDW"), anchor, flags);
	}
	
	/**
	 * AddNewProfile: with default state.
	 *		.class : #32770
	 * 		.processName : ACLWin.exe
	 */
	protected TopLevelSubitemTestObject SelectFileToDefine() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("SelectFileToDefine"));
	}
	/**
	 * AddNewProfile: with specific test context and state.
	 *		.class : #32770
	 * 		.processName : ACLWin.exe
	 */
	protected TopLevelSubitemTestObject SelectFileToDefine(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("SelectFileToDefine"), anchor, flags);
	}
	
	/**
	 * ACLIsDefiningAFilePleaseWait: with default state.
	 *		.class : .Statictext
	 * 		.name : ACL is defining a file. Please wait...
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject aclIsDefiningAFilePleaseWaitla() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("aclIsDefiningAFilePleaseWaitla"));
	}
	/**
	 * ACLIsDefiningAFilePleaseWait: with specific test context and state.
	 *		.class : .Statictext
	 * 		.name : ACL is defining a file. Please wait...
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject aclIsDefiningAFilePleaseWaitla(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("aclIsDefiningAFilePleaseWaitla"), anchor, flags);
	}
	
	/**
	 * AreYouSureYouWantToCancelTheDataDefinitionWizard: with default state.
	 *		.text : Are you sure you want to cancel the Data Definition Wizard?
	 * 		.class : Static
	 * 		.name : Are you sure you want to cancel the Data Definition Wizard?
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject areYouSureYouWantToCancelTheDa() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("areYouSureYouWantToCancelTheDa"));
	}
	/**
	 * AreYouSureYouWantToCancelTheDataDefinitionWizard: with specific test context and state.
	 *		.text : Are you sure you want to cancel the Data Definition Wizard?
	 * 		.class : Static
	 * 		.name : Are you sure you want to cancel the Data Definition Wizard?
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject areYouSureYouWantToCancelTheDa(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("areYouSureYouWantToCancelTheDa"), anchor, flags);
	}
	
	/**
	 * PCsAndAllOtherTypesOfComputersASCII: with default state.
	 *		.text : PCs and all other types of computers (ASCII)
	 * 		.class : .Radiobutton
	 * 		.name : PCs and all other types of computers (ASCII)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject cs_ascii() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("cs_ascii"));
	}
	/**
	 * PCsAndAllOtherTypesOfComputersASCII: with specific test context and state.
	 *		.text : PCs and all other types of computers (ASCII)
	 * 		.class : .Radiobutton
	 * 		.name : PCs and all other types of computers (ASCII)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject cs_ascii(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("cs_ascii"), anchor, flags);
	}
	
	/**
	 * EncodedText: with default state.
	 *		.text : Encoded Text
	 * 		.class : .Radiobutton
	 * 		.name : Encoded Text
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject cs_encoded() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("cs_encoded"));
	}
	/**
	 * EncodedText: with specific test context and state.
	 *		.text : Encoded Text
	 * 		.class : .Radiobutton
	 * 		.name : Encoded Text
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject cs_encoded(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("cs_encoded"), anchor, flags);
	}
	
	/**
	 * UnicodeText: with default state.
	 *		.text : Unicode Text
	 * 		.class : .Radiobutton
	 * 		.name : Unicode Text
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject cs_unicode() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("cs_unicode"));
	}
	/**
	 * UnicodeText: with specific test context and state.
	 *		.text : Unicode Text
	 * 		.class : .Radiobutton
	 * 		.name : Unicode Text
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject cs_unicode(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("cs_unicode"), anchor, flags);
	}
	
	/**
	 * _Back: with default state.
	 *		.text : < Back
	 * 		.class : .Pushbutton
	 * 		.name : < Back
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_back() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_back"));
	}
	/**
	 * _Back: with specific test context and state.
	 *		.text : < Back
	 * 		.class : .Pushbutton
	 * 		.name : < Back
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_back(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_back"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.text : Cancel
	 * 		.class : .Pushbutton
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_cancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_cancel"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.text : Cancel
	 * 		.class : .Pushbutton
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_cancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_cancel"), anchor, flags);
	}
	
	/**
	 * Finish: with default state.
	 *		.text : Finish
	 * 		.class : .Pushbutton
	 * 		.name : Finish
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_finish() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_finish"));
	}
	/**
	 * Finish: with specific test context and state.
	 *		.text : Finish
	 * 		.class : .Pushbutton
	 * 		.name : Finish
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_finish(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_finish"), anchor, flags);
	}
	
	/**
	 * Help: with default state.
	 *		.text : Help
	 * 		.class : .Pushbutton
	 * 		.name : Help
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_help() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_help"));
	}
	/**
	 * Help: with specific test context and state.
	 *		.text : Help
	 * 		.class : .Pushbutton
	 * 		.name : Help
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_help(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_help"), anchor, flags);
	}
	
	/**
	 * SetAllOptionsToTheirDefaultSettings: with default state.
	 *		.class : Static
	 */
	protected GuiSubitemTestObject ddw_info() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_info"));
	}
	/**
	 * SetAllOptionsToTheirDefaultSettings: with specific test context and state.
	 *		.class : Static
	 */
	protected GuiSubitemTestObject ddw_info(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_info"), anchor, flags);
	}
	
	/**
	 * FileExtensionFilNotSupportedForExcelImportSupportedExtensionsAreXlsXlsx: with default state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ddw_msg() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_msg"));
	}
	/**
	 * FileExtensionFilNotSupportedForExcelImportSupportedExtensionsAreXlsXlsx: with specific test context and state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ddw_msg(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_msg"), anchor, flags);
	}
	
	/**
	 * ACLServersDoNotSupportThisFileType: with default state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ddw_msg1() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_msg1"));
	}
	/**
	 * ACLServersDoNotSupportThisFileType: with specific test context and state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ddw_msg1(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_msg1"), anchor, flags);
	}
	
	/**
	 * AnErrorHasBeenDetectedOnLine1OfThisDataFileDoYouWishToContinueAnyway: with default state.
	 *		.class : Static
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject ddw_msgcancel() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_msgcancel"));
	}
	/**
	 * AnErrorHasBeenDetectedOnLine1OfThisDataFileDoYouWishToContinueAnyway: with specific test context and state.
	 *		.class : Static
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject ddw_msgcancel(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_msgcancel"), anchor, flags);
	}
	
	/**
	 * Next: with default state.
	 *		.text : Next >
	 * 		.class : .Pushbutton
	 * 		.name : Next >
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_next() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_next"));
	}
	/**
	 * Next: with specific test context and state.
	 *		.text : Next >
	 * 		.class : .Pushbutton
	 * 		.name : Next >
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_next(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_next"), anchor, flags);
	}
	
	/**
	 * No: with default state.
	 *		.text : No
	 * 		.class : .Pushbutton
	 * 		.name : No
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_nocancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_nocancel"));
	}
	/**
	 * No: with specific test context and state.
	 *		.text : No
	 * 		.class : .Pushbutton
	 * 		.name : No
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_nocancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_nocancel"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_ok"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_ok1() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_ok1"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_ok1(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_ok1"), anchor, flags);
	}
	
	/**
	 * DACLTFSViewRFT_AutomationQA_Automation_2012_V20ACLQA_AutomationACL_DesktopDATAACLProjectDataSourceDD: with default state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ddw_selectfilemsg() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_selectfilemsg"));
	}
	/**
	 * DACLTFSViewRFT_AutomationQA_Automation_2012_V20ACLQA_AutomationACL_DesktopDATAACLProjectDataSourceDD: with specific test context and state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject ddw_selectfilemsg(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_selectfilemsg"), anchor, flags);
	}
	
	/**
	 * InventoryXMLXMLFileNotFoundCheckTheFileNameAndTryAgain: with default state.
	 *		.class : .Statictext
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject ddw_selectfilemsg1() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_selectfilemsg1"));
	}
	/**
	 * InventoryXMLXMLFileNotFoundCheckTheFileNameAndTryAgain: with specific test context and state.
	 *		.class : .Statictext
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject ddw_selectfilemsg1(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("ddw_selectfilemsg1"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_selectfileok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_selectfileok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_selectfileok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_selectfileok"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_selectfileok1() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_selectfileok1"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_selectfileok1(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_selectfileok1"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.text : Cancel
	 * 		.class : .Pushbutton
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_xmlcancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_xmlcancel"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.text : Cancel
	 * 		.class : .Pushbutton
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_xmlcancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_xmlcancel"), anchor, flags);
	}
	
	/**
	 * Yes: with default state.
	 *		.text : Yes
	 * 		.class : .Pushbutton
	 * 		.name : Yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_yescancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_yescancel"));
	}
	/**
	 * Yes: with specific test context and state.
	 *		.text : Yes
	 * 		.class : .Pushbutton
	 * 		.name : Yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ddw_yescancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ddw_yescancel"), anchor, flags);
	}
	
	/**
	 * Comma: with default state.
	 *		.text : Comma
	 * 		.class : .Radiobutton
	 * 		.name : Comma
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_comma() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_comma"));
	}
	/**
	 * Comma: with specific test context and state.
	 *		.text : Comma
	 * 		.class : .Radiobutton
	 * 		.name : Comma
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_comma(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_comma"), anchor, flags);
	}
	
	/**
	 * TreatConsecutiveQualifiersAsOne: with default state.
	 *		.text : Treat Consecutive qualifiers as one.
	 * 		.class : .Checkbutton
	 * 		.name : Treat Consecutive qualifiers as one.
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_consecutive() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_consecutive"));
	}
	/**
	 * TreatConsecutiveQualifiersAsOne: with specific test context and state.
	 *		.text : Treat Consecutive qualifiers as one.
	 * 		.class : .Checkbutton
	 * 		.name : Treat Consecutive qualifiers as one.
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_consecutive(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_consecutive"), anchor, flags);
	}
	
	/**
	 * DoubleQuote: with default state.
	 *		.text : Double Quote
	 * 		.class : .Radiobutton
	 * 		.name : Double Quote
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_doublequalifier() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_doublequalifier"));
	}
	/**
	 * DoubleQuote: with specific test context and state.
	 *		.text : Double Quote
	 * 		.class : .Radiobutton
	 * 		.name : Double Quote
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_doublequalifier(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_doublequalifier"), anchor, flags);
	}
	
	/**
	 * _71: with default state.
	 *		.text : Field Width:
	 * 		.class : Edit
	 * 		.name : Field Width:
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject dfp_fieldwidth() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_fieldwidth"));
	}
	/**
	 * _71: with specific test context and state.
	 *		.text : Field Width:
	 * 		.class : Edit
	 * 		.name : Field Width:
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject dfp_fieldwidth(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_fieldwidth"), anchor, flags);
	}
	
	/**
	 * None: with default state.
	 *		.text : None
	 * 		.class : .Radiobutton
	 * 		.name : None
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_nonequalifier() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_nonequalifier"));
	}
	/**
	 * None: with specific test context and state.
	 *		.text : None
	 * 		.class : .Radiobutton
	 * 		.name : None
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_nonequalifier(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_nonequalifier"), anchor, flags);
	}
	
	/**
	 * Other: with default state.
	 *		.text : Other
	 * 		.class : .Radiobutton
	 * 		.name : Other
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_other() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_other"));
	}
	/**
	 * Other: with specific test context and state.
	 *		.text : Other
	 * 		.class : .Radiobutton
	 * 		.name : Other
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_other(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_other"), anchor, flags);
	}
	
	/**
	 * Other: with default state.
	 *		.text : Other
	 * 		.class : .Radiobutton
	 * 		.name : Other
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_otherqualifier() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_otherqualifier"));
	}
	/**
	 * Other: with specific test context and state.
	 *		.text : Other
	 * 		.class : .Radiobutton
	 * 		.name : Other
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_otherqualifier(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_otherqualifier"), anchor, flags);
	}
	
	/**
	 * Edit: with default state.
	 *		.text : null
	 * 		.class : Edit
	 * 		.name : null
	 * 		.classIndex : 3
	 */
	protected TextGuiTestObject dfp_qualifier() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_qualifier"));
	}
	/**
	 * Edit: with specific test context and state.
	 *		.text : null
	 * 		.class : Edit
	 * 		.name : null
	 * 		.classIndex : 3
	 */
	protected TextGuiTestObject dfp_qualifier(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_qualifier"), anchor, flags);
	}
	
	/**
	 * Semicolon: with default state.
	 *		.text : Semicolon
	 * 		.class : .Radiobutton
	 * 		.name : Semicolon
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_semicolon() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_semicolon"));
	}
	/**
	 * Semicolon: with specific test context and state.
	 *		.text : Semicolon
	 * 		.class : .Radiobutton
	 * 		.name : Semicolon
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_semicolon(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_semicolon"), anchor, flags);
	}
	
	/**
	 * Edit: with default state.
	 *		.text : Text Qualifier
	 * 		.class : Edit
	 * 		.name : Text Qualifier
	 * 		.classIndex : 2
	 */
	protected TextGuiTestObject dfp_separator() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_separator"));
	}
	/**
	 * Edit: with specific test context and state.
	 *		.text : Text Qualifier
	 * 		.class : Edit
	 * 		.name : Text Qualifier
	 * 		.classIndex : 2
	 */
	protected TextGuiTestObject dfp_separator(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_separator"), anchor, flags);
	}
	
	/**
	 * SingleQuote: with default state.
	 *		.text : Single Quote
	 * 		.class : .Radiobutton
	 * 		.name : Single Quote
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_singlequalifier() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_singlequalifier"));
	}
	/**
	 * SingleQuote: with specific test context and state.
	 *		.text : Single Quote
	 * 		.class : .Radiobutton
	 * 		.name : Single Quote
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_singlequalifier(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_singlequalifier"), anchor, flags);
	}
	
	/**
	 * _1: with default state.
	 *		.text : Start on Line:
	 * 		.class : Edit
	 * 		.name : Start on Line:
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject dfp_start() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_start"));
	}
	/**
	 * _1: with specific test context and state.
	 *		.text : Start on Line:
	 * 		.class : Edit
	 * 		.name : Start on Line:
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject dfp_start(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("dfp_start"), anchor, flags);
	}
	
	/**
	 * TAB: with default state.
	 *		.text : TAB
	 * 		.class : .Radiobutton
	 * 		.name : TAB
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_tab() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_tab"));
	}
	/**
	 * TAB: with specific test context and state.
	 *		.text : TAB
	 * 		.class : .Radiobutton
	 * 		.name : TAB
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_tab(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_tab"), anchor, flags);
	}
	
	/**
	 * UseFirstRowAsFieldNames: with default state.
	 *		.text : Use first row as field names?
	 * 		.class : .Checkbutton
	 * 		.name : Use first row as field names?
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_usefirst() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_usefirst"));
	}
	/**
	 * UseFirstRowAsFieldNames: with specific test context and state.
	 *		.text : Use first row as field names?
	 * 		.class : .Checkbutton
	 * 		.name : Use first row as field names?
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject dfp_usefirst(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("dfp_usefirst"), anchor, flags);
	}
	
	/**
	 * HEx: with default state.
	 *		.text : Hex
	 * 		.class : ACLGRID02
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject efp_grid() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("efp_grid"));
	}
	/**
	 * HEx: with specific test context and state.
	 *		.text : Hex
	 * 		.class : ACLGRID02
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject efp_grid(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("efp_grid"), anchor, flags);
	}
	
	/**
	 * Hex: with default state.
	 *		.text : Hex
	 * 		.class : .Checkbutton
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject efp_hex() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("efp_hex"));
	}
	/**
	 * Hex: with specific test context and state.
	 *		.text : Hex
	 * 		.class : .Checkbutton
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject efp_hex(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("efp_hex"), anchor, flags);
	}
	
	/**
	 * IgnoreThisField: with default state.
	 *		.text : Ignore this field
	 * 		.class : .Checkbutton
	 * 		.name : Ignore this field
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject efp_ignore() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("efp_ignore"));
	}
	/**
	 * IgnoreThisField: with specific test context and state.
	 *		.text : Ignore this field
	 * 		.class : .Checkbutton
	 * 		.name : Ignore this field
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject efp_ignore(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("efp_ignore"), anchor, flags);
	}
	
	/**
	 * DATE1: with default state.
	 *		.text : Name
	 * 		.class : Edit
	 * 		.name : Name
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject efp_name() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("efp_name"));
	}
	/**
	 * DATE1: with specific test context and state.
	 *		.text : Name
	 * 		.class : Edit
	 * 		.name : Name
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject efp_name(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("efp_name"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Type
	 * 		.class : ComboBox
	 * 		.name : Type
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject efp_type() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("efp_type"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Type
	 * 		.class : ComboBox
	 * 		.name : Type
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject efp_type(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("efp_type"), anchor, flags);
	}
	
	/**
	 * _01312012: with default state.
	 *		.text : Value
	 * 		.class : Edit
	 * 		.name : Value
	 * 		.classIndex : 2
	 */
	protected TextGuiTestObject efp_value() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("efp_value"));
	}
	/**
	 * _01312012: with specific test context and state.
	 *		.text : Value
	 * 		.class : Edit
	 * 		.name : Value
	 * 		.classIndex : 2
	 */
	protected TextGuiTestObject efp_value(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("efp_value"), anchor, flags);
	}
	
	/**
	 * MMMDDYYYY: with default state.
	 *		.text : Date Format
	 * 		.class : Edit
	 * 		.name : Date Format
	 * 		.classIndex : 3
	 */
	protected TextGuiTestObject eft_date() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("eft_date"));
	}
	/**
	 * MMMDDYYYY: with specific test context and state.
	 *		.text : Date Format
	 * 		.class : Edit
	 * 		.name : Date Format
	 * 		.classIndex : 3
	 */
	protected TextGuiTestObject eft_date(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("eft_date"), anchor, flags);
	}
	
	/**
	 * AccessDatabase: with default state.
	 *		.text : Access database
	 * 		.class : .Radiobutton
	 * 		.name : Access database
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_access() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_access"));
	}
	/**
	 * AccessDatabase: with specific test context and state.
	 *		.text : Access database
	 * 		.class : .Radiobutton
	 * 		.name : Access database
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_access(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_access"), anchor, flags);
	}
	
	/**
	 * AccPacMasterFile: with default state.
	 *		.text : AccPac master file
	 * 		.class : .Radiobutton
	 * 		.name : AccPac master file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_accpac() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_accpac"));
	}
	/**
	 * AccPacMasterFile: with specific test context and state.
	 *		.text : AccPac master file
	 * 		.class : .Radiobutton
	 * 		.name : AccPac master file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_accpac(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_accpac"), anchor, flags);
	}
	
	/**
	 * dBASECompatibleFile: with default state.
	 *		.text : dBASE compatible file
	 * 		.class : .Radiobutton
	 * 		.name : dBASE compatible file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_dbase() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_dbase"));
	}
	/**
	 * dBASECompatibleFile: with specific test context and state.
	 *		.text : dBASE compatible file
	 * 		.class : .Radiobutton
	 * 		.name : dBASE compatible file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_dbase(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_dbase"), anchor, flags);
	}
	
	/**
	 * DelimitedTextFile: with default state.
	 *		.text : Delimited text file
	 * 		.class : .Radiobutton
	 * 		.name : Delimited text file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_delimited() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_delimited"));
	}
	/**
	 * DelimitedTextFile: with specific test context and state.
	 *		.text : Delimited text file
	 * 		.class : .Radiobutton
	 * 		.name : Delimited text file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_delimited(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_delimited"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : null
	 * 		.class : ComboBox
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject ff_encoding() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("ff_encoding"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : null
	 * 		.class : ComboBox
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject ff_encoding(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("ff_encoding"), anchor, flags);
	}
	
	/**
	 * ExcelFile: with default state.
	 *		.text : Excel file
	 * 		.class : .Radiobutton
	 * 		.name : Excel file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_excel() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_excel"));
	}
	/**
	 * ExcelFile: with specific test context and state.
	 *		.text : Excel file
	 * 		.class : .Radiobutton
	 * 		.name : Excel file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_excel(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_excel"), anchor, flags);
	}
	
	/**
	 * OtherFileFormat: with default state.
	 *		.text : Other file format
	 * 		.class : .Radiobutton
	 * 		.name : Other file format
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_ibmother() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_ibmother"));
	}
	/**
	 * OtherFileFormat: with specific test context and state.
	 *		.text : Other file format
	 * 		.class : .Radiobutton
	 * 		.name : Other file format
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_ibmother(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_ibmother"), anchor, flags);
	}
	
	/**
	 * PrintImageReportFile: with default state.
	 *		.text : Print Image (Report) File
	 * 		.class : .Radiobutton
	 * 		.name : Print Image (Report) File
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_ibmprintimage() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_ibmprintimage"));
	}
	/**
	 * PrintImageReportFile: with specific test context and state.
	 *		.text : Print Image (Report) File
	 * 		.class : .Radiobutton
	 * 		.name : Print Image (Report) File
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_ibmprintimage(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_ibmprintimage"), anchor, flags);
	}
	
	/**
	 * OtherFileFormat: with default state.
	 *		.text : Other file format
	 * 		.class : .Radiobutton
	 * 		.name : Other file format
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_other() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_other"));
	}
	/**
	 * OtherFileFormat: with specific test context and state.
	 *		.text : Other file format
	 * 		.class : .Radiobutton
	 * 		.name : Other file format
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_other(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_other"), anchor, flags);
	}
	
	/**
	 * PDFAdobeAcrobatFile: with default state.
	 *		.text : PDF Adobe Acrobat file
	 * 		.class : .Radiobutton
	 * 		.name : PDF Adobe Acrobat file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_pdf() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_pdf"));
	}
	/**
	 * PDFAdobeAcrobatFile: with specific test context and state.
	 *		.text : PDF Adobe Acrobat file
	 * 		.class : .Radiobutton
	 * 		.name : PDF Adobe Acrobat file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_pdf(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_pdf"), anchor, flags);
	}
	
	/**
	 * PrintImageReportFile: with default state.
	 *		.text : Print Image (Report) file
	 * 		.class : .Radiobutton
	 * 		.name : Print Image (Report) file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_printimage() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_printimage"));
	}
	/**
	 * PrintImageReportFile: with specific test context and state.
	 *		.text : Print Image (Report) file
	 * 		.class : .Radiobutton
	 * 		.name : Print Image (Report) file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_printimage(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_printimage"), anchor, flags);
	}
	
	/**
	 * SAPPrivateFileFormatDART: with default state.
	 *		.text : SAP private file format / DART
	 * 		.class : .Radiobutton
	 * 		.name : SAP private file format / DART
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_sap() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_sap"));
	}
	/**
	 * SAPPrivateFileFormatDART: with specific test context and state.
	 *		.text : SAP private file format / DART
	 * 		.class : .Radiobutton
	 * 		.name : SAP private file format / DART
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_sap(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_sap"), anchor, flags);
	}
	
	/**
	 * XBRL21File: with default state.
	 *		.text : XBRL 2.1 file
	 * 		.class : .Radiobutton
	 * 		.name : XBRL 2.1 file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_xbrl() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_xbrl"));
	}
	/**
	 * XBRL21File: with specific test context and state.
	 *		.text : XBRL 2.1 file
	 * 		.class : .Radiobutton
	 * 		.name : XBRL 2.1 file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_xbrl(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_xbrl"), anchor, flags);
	}
	
	/**
	 * XMLFile: with default state.
	 *		.text : XML file
	 * 		.class : .Radiobutton
	 * 		.name : XML file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_xml() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_xml"));
	}
	/**
	 * XMLFile: with specific test context and state.
	 *		.text : XML file
	 * 		.class : .Radiobutton
	 * 		.name : XML file
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ff_xml(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ff_xml"), anchor, flags);
	}
	
	/**
	 * Discard: with default state.
	 *		.text : Discard
	 * 		.class : .Pushbutton
	 * 		.name : Discard
	 * 		.classIndex : 0
	 */
	protected GuiTestObject finish_discard() 
	{
		return new GuiTestObject(
                        getMappedTestObject("finish_discard"));
	}
	/**
	 * Discard: with specific test context and state.
	 *		.text : Discard
	 * 		.class : .Pushbutton
	 * 		.name : Discard
	 * 		.classIndex : 0
	 */
	protected GuiTestObject finish_discard(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("finish_discard"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject finish_ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("finish_ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject finish_ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("finish_ok"), anchor, flags);
	}
	
	/**
	 * t: with default state.
	 *		.text : null
	 * 		.class : Edit
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject finish_tablename() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("finish_tablename"));
	}
	/**
	 * t: with specific test context and state.
	 *		.text : null
	 * 		.class : Edit
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject finish_tablename(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("finish_tablename"), anchor, flags);
	}
	
	/**
	 * _0: with default state.
	 *		.text : Bytes to Skip
	 * 		.class : Edit
	 * 		.name : Bytes to Skip
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject fp_bytes() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("fp_bytes"));
	}
	/**
	 * _0: with specific test context and state.
	 *		.text : Bytes to Skip
	 * 		.class : Edit
	 * 		.name : Bytes to Skip
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject fp_bytes(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("fp_bytes"), anchor, flags);
	}
	
	/**
	 * FixedLength: with default state.
	 *		.text : Fixed Length
	 * 		.class : .Radiobutton
	 * 		.name : Fixed Length
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_fixed() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_fixed"));
	}
	/**
	 * FixedLength: with specific test context and state.
	 *		.text : Fixed Length
	 * 		.class : .Radiobutton
	 * 		.name : Fixed Length
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_fixed(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_fixed"), anchor, flags);
	}
	
	/**
	 * Hex: with default state.
	 *		.text : Hex
	 * 		.class : .Checkbutton
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_hex() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_hex"));
	}
	/**
	 * Hex: with specific test context and state.
	 *		.text : Hex
	 * 		.class : .Checkbutton
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_hex(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_hex"), anchor, flags);
	}
	
	/**
	 * _71: with default state.
	 *		.text : Record Length
	 * 		.class : Edit
	 * 		.name : Record Length
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject fp_record() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("fp_record"));
	}
	/**
	 * _71: with specific test context and state.
	 *		.text : Record Length
	 * 		.class : Edit
	 * 		.name : Record Length
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject fp_record(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("fp_record"), anchor, flags);
	}
	
	/**
	 * SkipToFinish: with default state.
	 *		.text : Skip to Finish
	 * 		.class : .Radiobutton
	 * 		.name : Skip to Finish
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_skip() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_skip"));
	}
	/**
	 * SkipToFinish: with specific test context and state.
	 *		.text : Skip to Finish
	 * 		.class : .Radiobutton
	 * 		.name : Skip to Finish
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_skip(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_skip"), anchor, flags);
	}
	
	/**
	 * VariableLength: with default state.
	 *		.text : Variable Length
	 * 		.class : .Radiobutton
	 * 		.name : Variable Length
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_variable() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_variable"));
	}
	/**
	 * VariableLength: with specific test context and state.
	 *		.text : Variable Length
	 * 		.class : .Radiobutton
	 * 		.name : Variable Length
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject fp_variable(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("fp_variable"), anchor, flags);
	}
	
	/**
	 * DataFileSingleRecordType: with default state.
	 *		.text : Data File (Single Record Type)
	 * 		.class : .Radiobutton
	 * 		.name : Data File (Single Record Type)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_datafile() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_datafile"));
	}
	/**
	 * DataFileSingleRecordType: with specific test context and state.
	 *		.text : Data File (Single Record Type)
	 * 		.class : .Radiobutton
	 * 		.name : Data File (Single Record Type)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_datafile(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_datafile"), anchor, flags);
	}
	
	/**
	 * MultipleRecordTypeFile: with default state.
	 *		.text : Multiple Record Type File
	 * 		.class : .Radiobutton
	 * 		.name : Multiple Record Type File
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_multiplerecord() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_multiplerecord"));
	}
	/**
	 * MultipleRecordTypeFile: with specific test context and state.
	 *		.text : Multiple Record Type File
	 * 		.class : .Radiobutton
	 * 		.name : Multiple Record Type File
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_multiplerecord(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_multiplerecord"), anchor, flags);
	}
	
	/**
	 * PrintImageFileReportFile: with default state.
	 *		.text : Print Image File (Report File)
	 * 		.class : .Radiobutton
	 * 		.name : Print Image File (Report File)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_printimage() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_printimage"));
	}
	/**
	 * PrintImageFileReportFile: with specific test context and state.
	 *		.text : Print Image File (Report File)
	 * 		.class : .Radiobutton
	 * 		.name : Print Image File (Report File)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_printimage(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_printimage"), anchor, flags);
	}
	
	/**
	 * SkipFieldIdentification: with default state.
	 *		.text : Skip Field Identification
	 * 		.class : .Radiobutton
	 * 		.name : Skip Field Identification
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_skipfield() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_skipfield"));
	}
	/**
	 * SkipFieldIdentification: with specific test context and state.
	 *		.text : Skip Field Identification
	 * 		.class : .Radiobutton
	 * 		.name : Skip Field Identification
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ft_skipfield(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ft_skipfield"), anchor, flags);
	}
	
	/**
	 * HEx: with default state.
	 *		.text : Hex
	 * 		.class : ACLGRID01
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject if_grid() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("if_grid"));
	}
	/**
	 * HEx: with specific test context and state.
	 *		.text : Hex
	 * 		.class : ACLGRID01
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject if_grid(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("if_grid"), anchor, flags);
	}
	
	/**
	 * Hex: with default state.
	 *		.text : Hex
	 * 		.class : .Checkbutton
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject if_hex() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("if_hex"));
	}
	/**
	 * Hex: with specific test context and state.
	 *		.text : Hex
	 * 		.class : .Checkbutton
	 * 		.name : Hex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject if_hex(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("if_hex"), anchor, flags);
	}
	
	/**
	 * Add: with default state.
	 *		.text : Add
	 * 		.class : .Pushbutton
	 * 		.name : Add
	 * 		.classIndex : 0
	 */
	protected GuiTestObject import_xmladd() 
	{
		return new GuiTestObject(
                        getMappedTestObject("import_xmladd"));
	}
	/**
	 * Add: with specific test context and state.
	 *		.text : Add
	 * 		.class : .Pushbutton
	 * 		.name : Add
	 * 		.classIndex : 0
	 */
	protected GuiTestObject import_xmladd(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("import_xmladd"), anchor, flags);
	}
	
	/**
	 * AutoPreview: with default state.
	 *		.text : Auto Preview
	 * 		.class : .Checkbutton
	 * 		.name : Auto Preview
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject import_xmlautoPreview() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("import_xmlautoPreview"));
	}
	/**
	 * AutoPreview: with specific test context and state.
	 *		.text : Auto Preview
	 * 		.class : .Checkbutton
	 * 		.name : Auto Preview
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject import_xmlautoPreview(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("import_xmlautoPreview"), anchor, flags);
	}
	
	/**
	 * SysTreeView32: with default state.
	 *		.text : Preview
	 * 		.class : SysTreeView32
	 * 		.name : Preview
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject import_xmltree() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("import_xmltree"));
	}
	/**
	 * SysTreeView32: with specific test context and state.
	 *		.text : Preview
	 * 		.class : SysTreeView32
	 * 		.name : Preview
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject import_xmltree(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("import_xmltree"), anchor, flags);
	}
	
	/**
	 * SysListView32: with default state.
	 *		.text : null
	 * 		.class : SysListView32
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject preview_tree() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("preview_tree"));
	}
	/**
	 * SysListView32: with specific test context and state.
	 *		.text : null
	 * 		.class : SysListView32
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject preview_tree(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("preview_tree"), anchor, flags);
	}
	
	/**
	 * WhoShouldBeNotified: with default state.
	 *		.class : #32770
	 * 		.processName : ACLWin.exe
	 */
	protected TopLevelSubitemTestObject progressBar() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("progressBar"));
	}
	/**
	 * WhoShouldBeNotified: with specific test context and state.
	 *		.class : #32770
	 * 		.processName : ACLWin.exe
	 */
	protected TopLevelSubitemTestObject progressBar(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("progressBar"), anchor, flags);
	}
	
	/**
	 * ACLIsDefiningAFilePleaseWait: with default state.
	 *		.text : ACL is defining a file. Please wait...
	 * 		.class : Static
	 * 		.name : ACL is defining a file. Please wait...
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject progressInfo() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("progressInfo"));
	}
	/**
	 * ACLIsDefiningAFilePleaseWait: with specific test context and state.
	 *		.text : ACL is defining a file. Please wait...
	 * 		.class : Static
	 * 		.name : ACL is defining a file. Please wait...
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject progressInfo(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("progressInfo"), anchor, flags);
	}
	
	/**
	 * ACLIsImportingFileDACLTFSViewSharedAutomationTestDataACLProjectDataSourceDDWLargeFileLargeEmployeesC: with default state.
	 *		.text : RegularExpression(ACL is importing file.*)
	 * 		.class : Static
	 * 		.name : RegularExpression(ACL is importing file.*)
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject progressInfoImport() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("progressInfoImport"));
	}
	/**
	 * ACLIsImportingFileDACLTFSViewSharedAutomationTestDataACLProjectDataSourceDDWLargeFileLargeEmployeesC: with specific test context and state.
	 *		.text : RegularExpression(ACL is importing file.*)
	 * 		.class : Static
	 * 		.name : RegularExpression(ACL is importing file.*)
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject progressInfoImport(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("progressInfoImport"), anchor, flags);
	}
	
	/**
	 * DACLTFSViewRFT_AutomationQA_Automation_2012_V20ACLQA_AutomationACL_DesktopDATAACLProjectDataSourceDD: with default state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject replace_msg() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("replace_msg"));
	}
	/**
	 * DACLTFSViewRFT_AutomationQA_Automation_2012_V20ACLQA_AutomationACL_DesktopDATAACLProjectDataSourceDD: with specific test context and state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject replace_msg(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("replace_msg"), anchor, flags);
	}
	
	/**
	 * Dat_t1FilAlreadyExistsDoYouWantToReplaceIt: with default state.
	 *		.class : .Statictext
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject replace_msg1() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("replace_msg1"));
	}
	/**
	 * Dat_t1FilAlreadyExistsDoYouWantToReplaceIt: with specific test context and state.
	 *		.class : .Statictext
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject replace_msg1(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("replace_msg1"), anchor, flags);
	}
	
	/**
	 * Yes: with default state.
	 *		.text : Yes
	 * 		.class : .Pushbutton
	 * 		.name : Yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject replace_yes() 
	{
		return new GuiTestObject(
                        getMappedTestObject("replace_yes"));
	}
	/**
	 * Yes: with specific test context and state.
	 *		.text : Yes
	 * 		.class : .Pushbutton
	 * 		.name : Yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject replace_yes(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("replace_yes"), anchor, flags);
	}
	
	/**
	 * Yes: with default state.
	 *		.text : Yes
	 * 		.class : .Pushbutton
	 * 		.name : Yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject replace_yes1() 
	{
		return new GuiTestObject(
                        getMappedTestObject("replace_yes1"));
	}
	/**
	 * Yes: with specific test context and state.
	 *		.text : Yes
	 * 		.class : .Pushbutton
	 * 		.name : Yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject replace_yes1(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("replace_yes1"), anchor, flags);
	}
	
	/**
	 * IBMMainframeOrMinicomputerEBCDIC: with default state.
	 *		.text : IBM mainframe or minicomputer (EBCDIC)
	 * 		.class : .Radiobutton
	 * 		.name : IBM mainframe or minicomputer (EBCDIC)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sc_ebcdic() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sc_ebcdic"));
	}
	/**
	 * IBMMainframeOrMinicomputerEBCDIC: with specific test context and state.
	 *		.text : IBM mainframe or minicomputer (EBCDIC)
	 * 		.class : .Radiobutton
	 * 		.name : IBM mainframe or minicomputer (EBCDIC)
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sc_ebcdic(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sc_ebcdic"), anchor, flags);
	}
	
	/**
	 * _50: with default state.
	 *		.text : Maximum Memo Field Length
	 * 		.class : Edit
	 * 		.name : Maximum Memo Field Length
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sds_charlength() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sds_charlength"));
	}
	/**
	 * _50: with specific test context and state.
	 *		.text : Maximum Memo Field Length
	 * 		.class : Edit
	 * 		.name : Maximum Memo Field Length
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sds_charlength(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sds_charlength"), anchor, flags);
	}
	
	/**
	 * EntireExcelWorksheetOrNamedRange: with default state.
	 *		.text : Entire Excel Worksheet or Named Range
	 * 		.class : .Radiobutton
	 * 		.name : Entire Excel Worksheet or Named Range
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sds_entire() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sds_entire"));
	}
	/**
	 * EntireExcelWorksheetOrNamedRange: with specific test context and state.
	 *		.text : Entire Excel Worksheet or Named Range
	 * 		.class : .Radiobutton
	 * 		.name : Entire Excel Worksheet or Named Range
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sds_entire(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sds_entire"), anchor, flags);
	}
	
	/**
	 * First100Records: with default state.
	 *		.text : First 100 records
	 * 		.class : .Radiobutton
	 * 		.name : First 100 records
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sds_first100() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sds_first100"));
	}
	/**
	 * First100Records: with specific test context and state.
	 *		.text : First 100 records
	 * 		.class : .Radiobutton
	 * 		.name : First 100 records
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sds_first100(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sds_first100"), anchor, flags);
	}
	
	/**
	 * UseFirstRowAsFieldNames: with default state.
	 *		.text : Use first row as Field Names
	 * 		.class : .Checkbutton
	 * 		.name : Use first row as Field Names
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sds_firstrows() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sds_firstrows"));
	}
	/**
	 * UseFirstRowAsFieldNames: with specific test context and state.
	 *		.text : Use first row as Field Names
	 * 		.class : .Checkbutton
	 * 		.name : Use first row as Field Names
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sds_firstrows(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sds_firstrows"), anchor, flags);
	}
	
	/**
	 * _100: with default state.
	 *		.text : null
	 * 		.class : Edit
	 * 		.name : null
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject sds_memolength() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sds_memolength"));
	}
	/**
	 * _100: with specific test context and state.
	 *		.text : null
	 * 		.class : Edit
	 * 		.name : null
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject sds_memolength(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sds_memolength"), anchor, flags);
	}
	
	/**
	 * ListBox: with default state.
	 *		.class : ListBox
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject sds_sheet() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("sds_sheet"));
	}
	/**
	 * ListBox: with specific test context and state.
	 *		.class : ListBox
	 * 		.name : null
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject sds_sheet(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("sds_sheet"), anchor, flags);
	}
	
	/**
	 * SetAllOptionsToTheirDefaultSettings: with default state.
	 *		.class : .Statictext
	 */
	protected GuiSubitemTestObject setAllOptionsToTheirDefaultSet() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("setAllOptionsToTheirDefaultSet"));
	}
	/**
	 * SetAllOptionsToTheirDefaultSettings: with specific test context and state.
	 *		.class : .Statictext
	 */
	protected GuiSubitemTestObject setAllOptionsToTheirDefaultSet(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("setAllOptionsToTheirDefaultSet"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.text : Cancel
	 * 		.class : RegularExpression(\.Pushbutton|.*)
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sf_cancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sf_cancel"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.text : Cancel
	 * 		.class : RegularExpression(\.Pushbutton|.*)
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sf_cancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sf_cancel"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : File name:
	 * 		.class : ComboBox
	 * 		.name : File name:
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sf_localfilename() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sf_localfilename"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : File name:
	 * 		.class : ComboBox
	 * 		.name : File name:
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sf_localfilename(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sf_localfilename"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : File name:
	 * 		.class : ComboBox
	 * 		.name : File name:
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sf_localfilename1() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sf_localfilename1"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : File name:
	 * 		.class : ComboBox
	 * 		.name : File name:
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sf_localfilename1(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sf_localfilename1"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Look in:
	 * 		.class : ComboBox
	 * 		.name : Look in:
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sf_lookin() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sf_lookin"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Look in:
	 * 		.class : ComboBox
	 * 		.name : Look in:
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sf_lookin(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sf_lookin"), anchor, flags);
	}
	
	/**
	 * Open: with default state.
	 *		.text : Open
	 * 		.class : RegularExpression(\.Pushbutton|.*)
	 * 		.name : Open
	 */
	protected GuiTestObject sf_open() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sf_open"));
	}
	/**
	 * Open: with specific test context and state.
	 *		.text : Open
	 * 		.class : RegularExpression(\.Pushbutton|.*)
	 * 		.name : Open
	 */
	protected GuiTestObject sf_open(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sf_open"), anchor, flags);
	}
	
	/**
	 * Save: with default state.
	 *		.text : Save
	 * 		.class : .Pushbutton
	 * 		.name : Save
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sf_save() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sf_save"));
	}
	/**
	 * Save: with specific test context and state.
	 *		.text : Save
	 * 		.class : .Pushbutton
	 * 		.name : Save
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sf_save(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sf_save"), anchor, flags);
	}
	
	/**
	 * Edit: with default state.
	 *		.text : File name:
	 * 		.class : Edit
	 * 		.name : File name:
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sf_serverfilename() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sf_serverfilename"));
	}
	/**
	 * Edit: with specific test context and state.
	 *		.text : File name:
	 * 		.class : Edit
	 * 		.name : File name:
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sf_serverfilename(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sf_serverfilename"), anchor, flags);
	}
	
	/**
	 * Disk: with default state.
	 *		.text : Disk:
	 * 		.class : .Radiobutton
	 * 		.name : Disk:
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject slds_disk() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("slds_disk"));
	}
	/**
	 * Disk: with specific test context and state.
	 *		.text : Disk:
	 * 		.class : .Radiobutton
	 * 		.name : Disk:
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject slds_disk(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("slds_disk"), anchor, flags);
	}
	
	/**
	 * ExternalDefinition: with default state.
	 *		.text : External Definition:
	 * 		.class : .Radiobutton
	 * 		.name : External Definition:
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject slds_external() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("slds_external"));
	}
	/**
	 * ExternalDefinition: with specific test context and state.
	 *		.text : External Definition:
	 * 		.class : .Radiobutton
	 * 		.name : External Definition:
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject slds_external(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("slds_external"), anchor, flags);
	}
	
	/**
	 * ODBC: with default state.
	 *		.text : ODBC:
	 * 		.class : .Radiobutton
	 * 		.name : ODBC:
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject slds_odbc() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("slds_odbc"));
	}
	/**
	 * ODBC: with specific test context and state.
	 *		.text : ODBC:
	 * 		.class : .Radiobutton
	 * 		.name : ODBC:
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject slds_odbc(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("slds_odbc"), anchor, flags);
	}
	
	/**
	 * Local: with default state.
	 *		.text : Local
	 * 		.class : .Radiobutton
	 * 		.name : Local
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_local() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_local"));
	}
	/**
	 * Local: with specific test context and state.
	 *		.text : Local
	 * 		.class : .Radiobutton
	 * 		.name : Local
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_local(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_local"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Select this option to use ACL to access the data.  You can access local or netwo ...
	 * 		.class : ComboBox
	 * 		.name : Select this option to use ACL to access the data.  You can access local or netwo ...
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sp_profile() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_profile"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Select this option to use ACL to access the data.  You can access local or netwo ...
	 * 		.class : ComboBox
	 * 		.name : Select this option to use ACL to access the data.  You can access local or netwo ...
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sp_profile(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_profile"), anchor, flags);
	}
	
	/**
	 * ACLServer: with default state.
	 *		.text : ACL Server
	 * 		.class : .Radiobutton
	 * 		.name : ACL Server
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_server() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_server"));
	}
	/**
	 * ACLServer: with specific test context and state.
	 *		.text : ACL Server
	 * 		.class : .Radiobutton
	 * 		.name : ACL Server
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_server(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_server"), anchor, flags);
	}
	
	/**
	 * DatabaseProfile: with default state.
	 *		.text : Database profile
	 * 		.class : .Radiobutton
	 * 		.name : Database profile
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ssds_dbProfile() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ssds_dbProfile"));
	}
	/**
	 * DatabaseProfile: with specific test context and state.
	 *		.text : Database profile
	 * 		.class : .Radiobutton
	 * 		.name : Database profile
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ssds_dbProfile(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ssds_dbProfile"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Your file is defined by either a COBOL or PL/1 file definition.
	 * 		.class : ComboBox
	 * 		.name : Your file is defined by either a COBOL or PL/1 file definition.
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject ssds_dbpros() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("ssds_dbpros"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Your file is defined by either a COBOL or PL/1 file definition.
	 * 		.class : ComboBox
	 * 		.name : Your file is defined by either a COBOL or PL/1 file definition.
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject ssds_dbpros(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("ssds_dbpros"), anchor, flags);
	}
	
	/**
	 * FlatFiles: with default state.
	 *		.text : Flat Files
	 * 		.class : .Radiobutton
	 * 		.name : Flat Files
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ssds_flatFiles() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ssds_flatFiles"));
	}
	/**
	 * FlatFiles: with specific test context and state.
	 *		.text : Flat Files
	 * 		.class : .Radiobutton
	 * 		.name : Flat Files
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject ssds_flatFiles(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("ssds_flatFiles"), anchor, flags);
	}
	
	/**
	 * TableLayoutOther_1DACLTFSViewRFT_AutomationQA_Automation_2012_V20ACLQA_AutomationACL_DesktopDATAACLP: with default state.
	 *		.text : RegularExpression(Table Layout - .*)
	 * 		.class : ifd
	 * 		.processName : ACLWin.exe
	 * 		.name : RegularExpression(Table Layout - .*)
	 */
	protected TopLevelSubitemTestObject tableLayout_View() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("tableLayout_View"));
	}
	/**
	 * TableLayoutOther_1DACLTFSViewRFT_AutomationQA_Automation_2012_V20ACLQA_AutomationACL_DesktopDATAACLP: with specific test context and state.
	 *		.text : RegularExpression(Table Layout - .*)
	 * 		.class : ifd
	 * 		.processName : ACLWin.exe
	 * 		.name : RegularExpression(Table Layout - .*)
	 */
	protected TopLevelSubitemTestObject tableLayout_View(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("tableLayout_View"), anchor, flags);
	}
	
	

	protected ddwmenuHelper()
	{
		setScriptName("ACL_Desktop.Tasks.ddwmenu");
	}
	
}


// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources.ACL_Desktop.Tasks;
import ACL_Desktop.AppObject.DesktopSuperHelper;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>servermenu</b><br>
 * Generated     : <b>2012/01/20 10:59:42 AM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows XP x86 5.1 build 2600 Service Pack 3 <br>
 * 
 * @since  January 20, 2012
 * @author Steven_Xiang
 */
public abstract class servermenuHelper extends ACL_Desktop.AppObject.DesktopSuperHelper
{
	/**
	 * Options: with default state.
	 *		.text : RegularExpression(ACL 9|Options|Server*|Security*)
	 * 		.class : #32770
	 * 		.processName : ACLWin.exe
	 * 		.name : RegularExpression(ACL 9|Options|Server*|Security*)
	 */
	protected TopLevelSubitemTestObject acl_window() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("acl_window"));
	}
	/**
	 * Options: with specific test context and state.
	 *		.text : RegularExpression(ACL 9|Options|Server*|Security*)
	 * 		.class : #32770
	 * 		.processName : ACLWin.exe
	 * 		.name : RegularExpression(ACL 9|Options|Server*|Security*)
	 */
	protected TopLevelSubitemTestObject acl_window(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("acl_window"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		.text : Close
	 * 		.class : .Pushbutton
	 * 		.name : Close
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_activity_close() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_activity_close"));
	}
	/**
	 * Close: with specific test context and state.
	 *		.text : Close
	 * 		.class : .Pushbutton
	 * 		.name : Close
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_activity_close(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_activity_close"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.text : Cancel
	 * 		.class : .Pushbutton
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_add_cancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_add_cancel"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.text : Cancel
	 * 		.class : .Pushbutton
	 * 		.name : Cancel
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_add_cancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_add_cancel"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Copy Settings From
	 * 		.class : ComboBox
	 * 		.name : Copy Settings From
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sp_add_copyfrom() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_add_copyfrom"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Copy Settings From
	 * 		.class : ComboBox
	 * 		.name : Copy Settings From
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sp_add_copyfrom(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_add_copyfrom"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_add_ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_add_ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_add_ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_add_ok"), anchor, flags);
	}
	
	/**
	 * Edit: with default state.
	 *		.text : Profile Name
	 * 		.class : Edit
	 * 		.name : Profile Name
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sp_add_profilename() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_add_profilename"));
	}
	/**
	 * Edit: with specific test context and state.
	 *		.text : Profile Name
	 * 		.class : Edit
	 * 		.name : Profile Name
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sp_add_profilename(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_add_profilename"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		.text : Close
	 * 		.class : .Pushbutton
	 * 		.name : Close
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_close() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_close"));
	}
	/**
	 * Close: with specific test context and state.
	 *		.text : Close
	 * 		.class : .Pushbutton
	 * 		.name : Close
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_close(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_close"), anchor, flags);
	}
	
	/**
	 * Compression: with default state.
	 *		.text : Compression
	 * 		.class : .Checkbutton
	 * 		.name : Compression
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_compression() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_compression"));
	}
	/**
	 * Compression: with specific test context and state.
	 *		.text : Compression
	 * 		.class : .Checkbutton
	 * 		.name : Compression
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_compression(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_compression"), anchor, flags);
	}
	
	/**
	 * Connect: with default state.
	 *		.text : Connect
	 * 		.class : .Pushbutton
	 * 		.name : Connect
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_connect() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_connect"));
	}
	/**
	 * Connect: with specific test context and state.
	 *		.text : Connect
	 * 		.class : .Pushbutton
	 * 		.name : Connect
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_connect(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_connect"), anchor, flags);
	}
	
	/**
	 * Disconnected: with default state.
	 *		.class : .Statictext
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject sp_connectstatus() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("sp_connectstatus"));
	}
	/**
	 * Disconnected: with specific test context and state.
	 *		.class : .Statictext
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject sp_connectstatus(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("sp_connectstatus"), anchor, flags);
	}
	
	/**
	 * Delete: with default state.
	 *		.text : Delete
	 * 		.class : .Pushbutton
	 * 		.name : Delete
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_delete() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_delete"));
	}
	/**
	 * Delete: with specific test context and state.
	 *		.text : Delete
	 * 		.class : .Pushbutton
	 * 		.name : Delete
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_delete(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_delete"), anchor, flags);
	}
	
	/**
	 * Disconnect: with default state.
	 *		.text : Disconnect
	 * 		.class : .Pushbutton
	 * 		.name : Disconnect
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_disconnect() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_disconnect"));
	}
	/**
	 * Disconnect: with specific test context and state.
	 *		.text : Disconnect
	 * 		.class : .Pushbutton
	 * 		.name : Disconnect
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_disconnect(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_disconnect"), anchor, flags);
	}
	
	/**
	 * Encryption: with default state.
	 *		.text : Encryption
	 * 		.class : .Checkbutton
	 * 		.name : Encryption
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_encryption() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_encryption"));
	}
	/**
	 * Encryption: with specific test context and state.
	 *		.text : Encryption
	 * 		.class : .Checkbutton
	 * 		.name : Encryption
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_encryption(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_encryption"), anchor, flags);
	}
	
	/**
	 * Help: with default state.
	 *		.text : Help
	 * 		.class : .Pushbutton
	 * 		.name : Help
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_help() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_help"));
	}
	/**
	 * Help: with specific test context and state.
	 *		.text : Help
	 * 		.class : .Pushbutton
	 * 		.name : Help
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_help(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_help"), anchor, flags);
	}
	
	/**
	 * _1921681091: with default state.
	 *		.text : Host Name
	 * 		.class : Edit
	 * 		.name : Host Name
	 * 		.classIndex : 3
	 */
	protected TextGuiTestObject sp_hostname() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_hostname"));
	}
	/**
	 * _1921681091: with specific test context and state.
	 *		.text : Host Name
	 * 		.class : Edit
	 * 		.name : Host Name
	 * 		.classIndex : 3
	 */
	protected TextGuiTestObject sp_hostname(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_hostname"), anchor, flags);
	}
	
	/**
	 * EnableIMS: with default state.
	 *		.text : Enable IMS
	 * 		.class : .Checkbutton
	 * 		.name : Enable IMS
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_ims() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_ims"));
	}
	/**
	 * EnableIMS: with specific test context and state.
	 *		.text : Enable IMS
	 * 		.class : .Checkbutton
	 * 		.name : Enable IMS
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_ims(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_ims"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_info_ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_info_ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.text : OK
	 * 		.class : .Pushbutton
	 * 		.name : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_info_ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_info_ok"), anchor, flags);
	}
	
	/**
	 * ProfileAlreadyExists: with default state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject sp_info_win() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("sp_info_win"));
	}
	/**
	 * ProfileAlreadyExists: with specific test context and state.
	 *		.class : Static
	 * 		.classIndex : 1
	 */
	protected GuiSubitemTestObject sp_info_win(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("sp_info_win"), anchor, flags);
	}
	
	/**
	 * New: with default state.
	 *		.text : New
	 * 		.class : .Pushbutton
	 * 		.name : New
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_new() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_new"));
	}
	/**
	 * New: with specific test context and state.
	 *		.text : New
	 * 		.class : .Pushbutton
	 * 		.name : New
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_new(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_new"), anchor, flags);
	}
	
	/**
	 * Password99: with default state.
	 *		.text : Password
	 * 		.class : Edit
	 * 		.name : Password
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject sp_password() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_password"));
	}
	/**
	 * Password99: with specific test context and state.
	 *		.text : Password
	 * 		.class : Edit
	 * 		.name : Password
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject sp_password(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_password"), anchor, flags);
	}
	
	/**
	 * _10000: with default state.
	 *		.text : Port
	 * 		.class : Edit
	 * 		.name : Port
	 * 		.classIndex : 4
	 */
	protected TextGuiTestObject sp_port() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_port"));
	}
	/**
	 * _10000: with specific test context and state.
	 *		.text : Port
	 * 		.class : Edit
	 * 		.name : Port
	 * 		.classIndex : 4
	 */
	protected TextGuiTestObject sp_port(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_port"), anchor, flags);
	}
	
	/**
	 * CACLAutomationACL_DATAData: with default state.
	 *		.text : Prefix
	 * 		.class : Edit
	 * 		.name : Prefix
	 * 		.classIndex : 2
	 */
	protected TextGuiTestObject sp_prefix() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_prefix"));
	}
	/**
	 * CACLAutomationACL_DATAData: with specific test context and state.
	 *		.text : Prefix
	 * 		.class : Edit
	 * 		.name : Prefix
	 * 		.classIndex : 2
	 */
	protected TextGuiTestObject sp_prefix(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_prefix"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Profile Name
	 * 		.class : ComboBox
	 * 		.name : Profile Name
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sp_profilename() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_profilename"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Profile Name
	 * 		.class : ComboBox
	 * 		.name : Profile Name
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject sp_profilename(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_profilename"), anchor, flags);
	}
	
	/**
	 * Save: with default state.
	 *		.text : Save
	 * 		.class : .Pushbutton
	 * 		.name : Save
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_save() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_save"));
	}
	/**
	 * Save: with specific test context and state.
	 *		.text : Save
	 * 		.class : .Pushbutton
	 * 		.name : Save
	 * 		.classIndex : 0
	 */
	protected GuiTestObject sp_save(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sp_save"), anchor, flags);
	}
	
	/**
	 * ComboBox: with default state.
	 *		.text : Server Type
	 * 		.class : ComboBox
	 * 		.name : Server Type
	 * 		.classIndex : 1
	 */
	protected TextSelectGuiSubitemTestObject sp_servertype() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_servertype"));
	}
	/**
	 * ComboBox: with specific test context and state.
	 *		.text : Server Type
	 * 		.class : ComboBox
	 * 		.name : Server Type
	 * 		.classIndex : 1
	 */
	protected TextSelectGuiSubitemTestObject sp_servertype(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("sp_servertype"), anchor, flags);
	}
	
	/**
	 * UseIntegratedWindowsAuthentication: with default state.
	 *		.text : Use Integrated Windows Authentication
	 * 		.class : .Checkbutton
	 * 		.name : Use Integrated Windows Authentication
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_sso() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_sso"));
	}
	/**
	 * UseIntegratedWindowsAuthentication: with specific test context and state.
	 *		.text : Use Integrated Windows Authentication
	 * 		.class : .Checkbutton
	 * 		.name : Use Integrated Windows Authentication
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject sp_sso(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("sp_sso"), anchor, flags);
	}
	
	/**
	 * ACLQAAdministrator: with default state.
	 *		.text : User ID
	 * 		.class : Edit
	 * 		.name : User ID
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sp_userid() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_userid"));
	}
	/**
	 * ACLQAAdministrator: with specific test context and state.
	 *		.text : User ID
	 * 		.class : Edit
	 * 		.name : User ID
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject sp_userid(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("sp_userid"), anchor, flags);
	}
	
	

	protected servermenuHelper()
	{
		setScriptName("ACL_Desktop.Tasks.servermenu");
	}
	
}

